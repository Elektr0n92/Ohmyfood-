@use "sass:math";
@use "sass:map";

@function functlight($color){
    @return lighten($color, 20%);
}

@function toRem($value) {
    $remValue: calc($value / 16) + rem; 
    @return $remValue;
}

@function clamp-calc($minval, $minvw, $maxvw, $maxval ){
    $minvw: calc(#{$minvw} /16);
    $maxvw: calc(#{$maxvw} /16);
     
    $slope: calc((#{$maxval} - #{$minval}) / (#{$maxvw} - #{$minvw}));
    $yaxis: calc(#{$minval} + (#{$minvw} * #{$slope} * -1));
    $prefervalue: clamp(1rem, calc((#{$yaxis} * 1rem) + (#{$slope} * 100) * 1vw),3.5rem);
    @return $prefervalue;
}


@function clamp-bsc($minval: $minval, $minvw, $maxvw, $maxval: $maxval){
    $difval: calc($maxval - $minval);
    $minval: $minval;
    $maxval: $maxval;
    $difvw: calc($maxvw - $minvw);
    $v: calc(100 *($difval)  / ($difvw)) +vw;
    $r: calc(($minvw * $maxval) - ($maxvw * $minval) / ($minvw - $maxvw)) +rem;
    @debug $v;
    $result : clamp($minval, $r + $v, $maxval);
    @return $result;
}



@function rnd($number, $places: 0) {
    $n: 1;
    @if $places > 0 {
      @for $i from 1 through $places {
        $n: $n * 10;
      }
    }
    @return math.div(math.round($number * $n), $n);
  }


@function clamped($min-px, $max-px, $min-bp: $default-min-bp, $max-bp: $default-max-bp) {
    $slope: math.div($max-px - $min-px, $max-bp - $min-bp);
    $slope-vw: rnd($slope * 100, 2);
    $intercept-rems: rnd(to-rems($min-px - $slope * $min-bp), 2);
    $min-rems: rnd(to-rems($min-px), 2);
    $max-rems: rnd(to-rems($max-px), 2);
    @return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
  }

  @function to-rems($px) {
    $rems: math.div($px, 16px) * 1rem;
    @return $rems;
  }